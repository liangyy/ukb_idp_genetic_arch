import pandas as pd
import numpy as np

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(prog='augment_snp_effects.py', 
        description='''
            Augment SNP effects generated by simulate_effect_sizes.py
        ''')
    parser.add_argument('--snp_effect_parquet', help='''
        Parquet file for SNP effects
    ''')
    parser.add_argument('--output', help='''
        Output parquet name
    ''')
    parser.add_argument('--rand_seed', type=int, help='''
        Rand seed
    ''')
    parser.add_argument('--augment_size', type=int, help='''
        Number of traits to augment
    ''')
    args = parser.parse_args()
 
    import logging, time, sys, os
    # configing util
    logging.basicConfig(
        level = logging.INFO, 
        stream = sys.stderr, 
        format = '%(asctime)s  %(message)s',
        datefmt = '%Y-%m-%d %I:%M:%S %p')
    
    np.random.seed(args.rand_seed)
    logging.info('Loading parquet')
    df = pd.read_parquet(args.snp_effect_parquet)
    logging.info('Size = {} x {}'.format(df.shape[0], df.shape[1]))
    
    logging.info('Augmenting: n = {}'.format(args.augment_size))
    new_weights = np.random.normal(size=(df.shape[0], args.augment_size))
    names = [ f'Additional_{i}' for i in range(args.augment_size) ]
    df_new = pd.DataFrame(new_weights, columns=names)
    df = pd.concat([df, df_new], axis=1)
    logging.info('New size = {} x {}'.format(df.shape[0], df.shape[1]))
    
    logging.info('Saving')
    df.to_parquet(args.output)
    